-> The Modular JDK
-> jShell

Collections: The New Way
    Collection Factory Method:
         Old Way:
                 List<Integer> ints = new ArrayList<>();
                 ints.add(1);
                 ints.add(2);
                 ints.add(3);
         New Way:
                List<Integer> ints = List.of(1, 2, 3);   //the returned list is IMMUTABLE. you CAN'T add more elements to it
                you can use     Set.of(1,2,3);    to create sets in the same way
                                Map.of("key1", "value1", "key2", "value2");

Stream API Improvements:
    - Added Methods:
            Stream<T> takeWhile(Predicate<? super T> predicate);

            Stream<T> dropWhile(Predicate<? super T> predicate);

            static Stream<T> ofNullable(T t);
                private static Book getPossiblyNull(boolean isNull) {
                    return isNull ? null : getBook();
                }
                Before:
                    Book book =  getPossiblyNull(true);
                    Stream<String> authors = book == null ? Stream.empty() : book.authors.stream();
                    authors.forEach(System.out::println);

                With ofNullable
                    Stream.ofNullable(getPossiblyNull(false))
                            .flatMap(b -> b.authors.stream())
                            .forEach(System.out::println);

            static Stream<T> iterate(T seed,
                                        Predicate<? super T> hasNext,
                                        UnaryOperator<T> next)

========================================================================================================================
    - Collectors:
        Collectors are about consuming the stream and putting the element into a new Collection
                List<Integer> ints = Stream.of(1, 2, 3)
                                                .map(n -> n + 1)
                                                .collect(Collectors.toList());
                                                //[2, 3, 4]
                Collectors.groupingBy:
                    Map<Integer, List<Integer>> ints = Stream.of(1, 2, 3, 3)
                                                                .collect(groupingBy(i -> i % 2, toList()));

------------------------------------------------------------------------------------------------------------------------

                NEW COLLECTORS:

                    Collectors.filtering(Predicate predicate, Collector downstream)
                        Map<Set<String>, Set<Book>> booksByAuthors = books.collect(
                                                                                groupingBy(Book:getAuthors, filtering(b -> b.getPrince() > 10, toSet())));

                    Collectors.flatMapping(Function mapper, Collector downstream)
                        Map<Double, Set<String>> authorsSellingForPrice = books.collect(
                                                                                    groupingBy(Book::getPrice, flatMapping(b -> b.getAuthors().stream(), toSet())));


========================================================================================================================
    Optional API:
        Refresher:
            Optional reprsents either a single value
                    Optional<String> s = Optional.of("Hi");
            or it represents no value
                    Optiona<Integer> i = Optional.empty();

            Optional is a better way for a method to say that it may or may not return a value(instead of using null)

        Added methods:
            void ifPresentOrElse(Consumer<T> action, Runnable emptyAction);

            Optional<T> or(Supplier<Optional<T>> supplier);

            Stream<T> stream()   - an empty optional becomes an empty stream, and a full optional becomes a stream with 1 element
                    Stream<Optional<Integer>> optionals = Stream.of(Optional.of(1), Optional.empty(), Optional.of(2));
                    Integer> ints = optionals.flatMap(Optional::stream);  (ints will contain only 1,2)

            Set<String> authors = Book.getBooks()
                                         .map(book -> book.authors.stream().findFirst())
                                         .flatMap(optAuthor -> optAuthor.stream())
                                         .collect(Collectors.toSet());
                    - findFirst() returns an Optional, because : - if there is no first author, it will return an Optional.empty();
                                                                 - if there is a first element, it will return a full Optional containing the firs author(full Optional = optional with 1 element)
                    - flatMap() will take care to return all of the optional stream(made by this optAuthor.stream() ) into a single stream of strings


========================================================================================================================
    Small Language Changes
        - Underscore as identifier illegal
        - Improved try-with-resource
        - Better generic type inference for anonymous classes
        - Private interface methods
                - 'private methods can be used within the body of default methods

        Improved try-with-resource
            public void doWithFile(FileInputStream fis) throws IOException{
                try (fis) {
                /* the condition to use *fis*  here is that *fis* needs to be EFECTIVELY FINAL variable( - a variable that has the final keyword)
                                                                                                        (- or it does not have the final keywords but it's not reassigned withing the method)
                 */
                    fis.read();
                }
            }


















